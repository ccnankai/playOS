
/LocalRun/wendong.song/diyos/playOS/build/source/kernel/kernel.elf:     file format elf32-i386
/LocalRun/wendong.song/diyos/playOS/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x0000002c memsz 0x00000038 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000000c  00100010  00100010  00001010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  0010001c  0010001c  0000101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  0010002c  0010002c  0000102c  2**2
                  ALLOC
  4 .debug_line   0000012c  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001aa  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010e  00000000  00000000  00001302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00001410  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000231  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000029  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY
 10 .debug_frame  0000002c  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00100000 l    d  .text	00000000 .text
00100010 l    d  .rodata	00000000 .rodata
0010001c l    d  .data	00000000 .data
0010002c l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 init.c
00100020 l     O .data	00000004 static_global_var
0010002c l     O .bss	00000004 static_global_var_zero
00100030 l     O .bss	00000004 static_local_var_zero.1430
00100028 l     O .data	00000004 static_local_var.1429
0010001c g     O .data	00000004 global_var
00100034 g     O .bss	00000004 globa_var_zero
00100010 g     O .rodata	00000004 const_int
0010000b g     F .text	00000005 kernel_init
00100000 g       .text	00000000 _start
00100024 g     O .data	00000004 str



Disassembly of section .text:

00100000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
  100000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
  100004:	e8 02 00 00 00       	call   10000b <kernel_init>

	jmp .
  100009:	eb fe                	jmp    100009 <_start+0x9>

0010000b <kernel_init>:
const char * str = "abcdefg";

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
  10000b:	55                   	push   %ebp
  10000c:	89 e5                	mov    %esp,%ebp
    int locar_var;
    static int static_local_var = 0x33;
    static int static_local_var_zero;
    
    for (;;) {}
  10000e:	eb fe                	jmp    10000e <kernel_init+0x3>
